import calendar
import configparser
from datetime import datetime, timedelta

from google.oauth2.service_account import Credentials
import gspread

import pandas as pd
import pymsteams
import requests
import json

# Authenticate and connect to Google Sheets
def connect_to_google_sheets(sheet_name, autocreds):
    creds = Credentials.from_service_account_file(autocreds, scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ])
    client = gspread.authorize(creds)
    try:
        return client.open(sheet_name)  # Open the sheet by name
    except gspread.SpreadsheetNotFound:
        print(f"Spreadsheet '{sheet_name}' not found.")
        return None


def get_events(num_events, schedule_df):
    """
    Parse the schedule DataFrame and return upcoming events.
    """
    today = datetime.today().strftime('%Y-%m-%d')
    
    # Drop rows without a date
    schedule_df.dropna(subset=['Date'], inplace=True)

    # Convert 'Date' to datetime
    schedule_df['Date'] = pd.to_datetime(schedule_df['Date'], errors='coerce')

    # Filter out past events
    schedule_df = schedule_df[schedule_df['Date'] > pd.to_datetime(today)]
    
    if not schedule_df.empty:
        # Get the specified number of upcoming events
        schedule_df = schedule_df.iloc[:int(num_events)].reset_index(drop=True)
    
    return schedule_df

def send_teams(labmeeting_settings, msteam_settings, cal):
    location = labmeeting_settings['room']
    zoom_link = labmeeting_settings['zoom']
    holiday_vocab = set(labmeeting_settings['holiday_vocab'].split(", "))

    num_events_teams =  msteam_settings['maxevents']
    webhook_name = msteam_settings['webhookname']
    webhook_url = msteam_settings['webhookUrl']

    date_sections = []
    first = True
    for date, topic, member in zip(cal['Date'], cal['Type'], cal['Presenter(s)']):
        formatted_date = date.strftime('%Y-%m-%d')
        message_section = pymsteams.cardsection()
        if pd.isna(member) or topic in holiday_vocab:
            text_ = f"<strong>{formatted_date}</strong> <font color='red'>{topic} - {member}</font>"
        else:
            if first:
                text_ = f"<strong>{formatted_date}</strong> {member} | {topic} (location <strong>{location}</strong> and {zoom_link})"
                first = False
            else:
                text_ = f"<strong>{formatted_date}</strong> {member} | {topic}"
            
        # Set the text for the cardsection
        message_section.text(text_)
        # Add the cardsection object to date_sections
        date_sections.append(message_section)

    # Create the main connectorcard
    upcoming_events = pymsteams.connectorcard(hookurl=webhook_url)
    upcoming_events.title(f"Upcoming Lab Meeting Schedule")
    upcoming_events.text(f" ")
    # upcoming_events.text(f"""
    # Message automatically generated by `{webhook_name}`
    # * **Date**: { datetime.today().strftime('%Y-%m-%d') }
    # """)
    # Add sections to the main connectorcard
    for section in date_sections:
        upcoming_events.addSection(section)
    # # check content before sending
    # upcoming_events.printme()
    
    # Send the message
    try:
        payload = upcoming_events.payload
        response = requests.post(
            webhook_url,
            headers={'Content-Type': 'application/json'},
            data=json.dumps(payload)
        )

        if response.status_code != 200:
            print(f"Teams webhook failed: {response.status_code} - {response.text}\n")
        else:
            print("Teams message sent successfully.\n")

    except Exception as e:
        print(f"Error sending Teams message: {e}\n")

def main():
    config = configparser.ConfigParser()
    config.read('cal_config.cfg')
    labmeeting_settings = config['labmeeting']
    msteam_settings = config['teams']
    num_events_teams =  msteam_settings['maxevents']
    # Fetch the schedule data from Google Sheets
    spreadsheet = connect_to_google_sheets(labmeeting_settings['googlesheet'], labmeeting_settings['autocreds'])
    schedule_df = pd.DataFrame(spreadsheet.worksheet("Schedule").get_all_records())
    if schedule_df.empty:
        print("No events found in the schedule.")
        return

    upcoming_events = get_events(num_events_teams, schedule_df)
    print(upcoming_events)
    send_teams(labmeeting_settings, msteam_settings, upcoming_events)

if __name__ == "__main__":
    main()